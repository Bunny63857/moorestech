# The workflow name
name: Create Github Release

# Trigger the workflow manually
on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get latest successful Build
        id: get_build
        run: |
          LATEST_BUILD=$(curl --request GET \
          --url https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/runs \
          --header 'authorization: Bearer ${{ secrets.GH_TOKEN }}' | jq -r '.workflow_runs[] | select(.conclusion == "success") | .id' | head -1)
          echo "LATEST_BUILD=$LATEST_BUILD" >> $GITHUB_ENV
          
          これを試す https://zenn.dev/jordan/articles/b6c1e905adab31#:~:text=%E4%BD%BF%E3%81%86%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98%0Adownload%2Dartifact%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9Fid%E3%82%92%22Echo%20download%20path%22%20step%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82

      - name: Download artifact - Output_StandaloneLinux64
        uses: actions/download-artifact@v2
        with:
          name: Output_StandaloneLinux64.zip
          workflow: ${{ env.LATEST_BUILD }}

      - name: Download artifact - Output_StandaloneOSX
        uses: actions/download-artifact@v2
        with:
          name: Output_StandaloneOSX.zip
          workflow: ${{ env.LATEST_BUILD }}

      - name: Download artifact - Output_StandaloneWindows64
        uses: actions/download-artifact@v2
        with:
          name: Output_StandaloneWindows64.zip
          workflow: ${{ env.LATEST_BUILD }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} # To use this action, you must set the GITHUB_TOKEN secret
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above
          asset_path: ./Output_StandaloneLinux64.zip
          asset_name: Output_StandaloneLinux64.zip
          asset_content_type: application/zip

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above
          asset_path: ./Output_StandaloneOSX.zip
          asset_name: Output_StandaloneOSX.zip
          asset_content_type: application/zip

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above
          asset_path: ./Output_StandaloneWindows64.zip
          asset_name: Output_StandaloneWindows64.zip
          asset_content_type: application/zip
